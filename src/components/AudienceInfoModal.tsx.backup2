'use client';

import { useState, useEffect, useRef } from 'react';
import { createPayAppPayment } from '@/services/payappService';

interface AudienceInfo {
  name: string;
  phone: string;
  attendeeCount: number;
  busService: boolean;
  busAttendeeCount: number;
  privacyAgreement: boolean;
}

interface FormErrors {
  name?: string;
  phone?: string;
  attendeeCount?: string;
  busAttendeeCount?: string;
  privacyAgreement?: string;
}

interface AudienceInfoModalProps {
  isVisible: boolean;
  onClose: () => void;
  onComplete: (info: AudienceInfo) => void;
  onShowPerformanceInfo: () => void;
  propName: string;
  propId: number; // 물품 ID 추가
}

declare global {
  interface Window {
    customKeyboard: any;
    ReactKeyboardInput?: (text: string) => void;
    ReactKeyboardEnter?: () => void;
    ReactKeyboardEsc?: () => void;
  }
}

export default function AudienceInfoModal({ 
  isVisible, 
  onClose, 
  onComplete, 
  onShowPerformanceInfo,
  propName,
  propId
}: AudienceInfoModalProps) {
  const [formData, setFormData] = useState<AudienceInfo>({
    name: '',
    phone: '',
    attendeeCount: 1,
    busService: false,
    busAttendeeCount: 1,
    privacyAgreement: false
  });

  const [errors, setErrors] = useState<FormErrors>({});
  const [showKeyboard, setShowKeyboard] = useState(false);
  const [activeField, setActiveField] = useState<'name' | 'phone' | null>(null);
  const keyboardRef = useRef<HTMLDivElement>(null);
  const nameInputRef = useRef<HTMLInputElement>(null);
  const phoneInputRef = useRef<HTMLInputElement>(null);
  
  // 결제 관련 상태
  const [showPayment, setShowPayment] = useState(false);
  const [paymentStatus, setPaymentStatus] = useState<'pending' | 'success' | 'failed'>('pending');
  const [isLoading, setIsLoading] = useState(false);
  const [showConfirmation, setShowConfirmation] = useState(false);
  const [showReceiptConfirm, setShowReceiptConfirm] = useState(false);

  // 키보드 초기화
  useEffect(() => {
    // 스크립트 로드
    const loadScripts = async () => {
      if (typeof window !== 'undefined' && !window.customKeyboard) {
        try {
          console.log('스크립트 로딩 시작...');
          
          // Hangul.js 로드
          const hangulScript = document.createElement('script');
          hangulScript.src = '/hangul.js';
          hangulScript.async = true;
          
          // Keyboard.js 로드
          const keyboardScript = document.createElement('script');
          keyboardScript.src = '/keyboard.js';
          keyboardScript.async = true;

          // 스크립트 로드 완료 대기
          await new Promise((resolve, reject) => {
            hangulScript.onload = () => {
              console.log('Hangul.js 로드 완료');
            };
            hangulScript.onerror = (e) => {
              console.error('Hangul.js 로드 실패:', e);
              reject(new Error('Hangul.js 로드 실패'));
            };
            
            keyboardScript.onload = () => {
              console.log('Keyboard.js 로드 완료');
              // 스크립트 로드 후 잠시 대기
              setTimeout(() => {
                console.log('window.customKeyboard 확인:', typeof window.customKeyboard);
                resolve(true);
              }, 100);
            };
            keyboardScript.onerror = (e) => {
              console.error('Keyboard.js 로드 실패:', e);
              reject(new Error('Keyboard.js 로드 실패'));
            };
            
            document.head.appendChild(hangulScript);
            document.head.appendChild(keyboardScript);
          });
          
          console.log('모든 스크립트 로드 완료');
        } catch (error) {
          console.error('스크립트 로드 실패:', error);
        }
      } else {
        console.log('이미 스크립트가 로드됨:', typeof window.customKeyboard);
      }
    };

    loadScripts();

    // 전역 콜백 함수 등록
    if (typeof window !== 'undefined') {
      window.ReactKeyboardInput = handleKeyboardInput;
      window.ReactKeyboardEnter = handleKeyboardEnter;
      window.ReactKeyboardEsc = handleKeyboardEsc;
    }

    // 클린업
    return () => {
      if (typeof window !== 'undefined') {
        window.ReactKeyboardInput = undefined;
        window.ReactKeyboardEnter = undefined;
        window.ReactKeyboardEsc = undefined;
      }
    };
  }, []);

  // 키보드 표시 시 초기화
  useEffect(() => {
    if (showKeyboard && keyboardRef.current && window.customKeyboard) {
      const input = activeField === 'name' ? nameInputRef.current : phoneInputRef.current;
      
      if (input) {
        try {
          // 기존 키보드 제거
          if (keyboardRef.current.children.length > 0) {
            keyboardRef.current.innerHTML = '';
          }
          
          // 핸드폰 번호 입력 시 커스텀 숫자 키패드 생성
          if (activeField === 'phone') {
            // 기존 키보드 제거
            keyboardRef.current.innerHTML = '';
            
            // phoneNumber 레이아웃 사용
            const keyboard = new window.customKeyboard(
              keyboardRef.current,
              input,
              (text: string) => {
                console.log('키보드 입력:', text);
                handleKeyboardInput(text);
              },
              () => {
                console.log('ESC 키');
                handleKeyboardEsc();
              },
              (e: any) => {
                console.log('Enter 키');
                handleKeyboardEnter();
              },
              'phoneNumber'
            );
            
            console.log('숫자 키패드 생성 완료');
          } else {
            // 이름 입력 시 기존 키보드 사용 (수정된 스크립트로 koNormal 기본값)
            const keyboard = new window.customKeyboard(
              keyboardRef.current,
              input,
              (text: string) => {
                console.log('키보드 입력:', text);
                handleKeyboardInput(text);
              },
              () => {
                console.log('ESC 키');
                handleKeyboardEsc();
              },
              (e: any) => {
                console.log('Enter 키');
                handleKeyboardEnter();
              },
              null
            );
            
            console.log('한글 키보드 초기화 완료 (koNormal 기본값)');
          }
        } catch (error) {
          console.error('키보드 초기화 실패:', error);
          if (error instanceof Error) {
            console.error('에러 상세:', error.message);
            console.error('에러 스택:', error.stack);
          }
        }
      }
    }
  }, [showKeyboard, activeField]);

  // 키보드 표시/숨김
  const toggleKeyboard = (field: 'name' | 'phone') => {
    if (activeField === field) {
      setShowKeyboard(false);
      setActiveField(null);
    } else {
      setActiveField(field);
      setShowKeyboard(true);
    }
  };

  // 키보드 입력 처리
  const handleKeyboardInput = (text: string) => {
    if (activeField === 'name') {
      setFormData(prev => ({ ...prev, name: text }));
    } else if (activeField === 'phone') {
      setFormData(prev => ({ ...prev, phone: text }));
    }
  };

  // 키보드 Enter 처리
  const handleKeyboardEnter = () => {
    setShowKeyboard(false);
    setActiveField(null);
  };

  // 키보드 ESC 처리
  const handleKeyboardEsc = () => {
    setShowKeyboard(false);
    setActiveField(null);
  };

  // 카카오맵 실제 지도퍼가기 HTML 삽입 (이미지 크기에 맞춤)
  useEffect(() => {
    if (isVisible) {
      const mapContainer = document.getElementById('daumRoughmapContainer1755930369777');
      if (mapContainer) {
        mapContainer.innerHTML = `
          <div style="font:normal normal 400 12px/normal dotum, sans-serif; width:100%; height:100%; color:#333; position:relative">
            <div style="height: 100%;">
              <img class="map" src="http://t1.daumcdn.net/roughmap/imgmap/3d955c01aac6028aae05cffeb42ea9932d383dec93bc02592915bf7c521fab66" width="100%" height="100%" style="border:1px solid #ccc; object-fit: cover;">
            </div>
            <div style="overflow: hidden; padding: 7px 11px; border: 1px solid rgba(0, 0, 0, 0.1); border-radius: 0px 0px 2px 2px; background-color: rgb(249, 249, 249);">
              <div style="float: left;">
                <img src="//t1.daumcdn.net/localimg/localimages/07/2018/pc/common/logo_kakaomap.png" width="72" height="16" alt="카카오맵" style="display:block;width:72px;height:16px">
              </div>
              <div style="float: right; position: relative; top: 1px; font-size: 11px; color: #666;">
                위치 정보
              </div>
            </div>
          </div>
        `;
      }
    }
  }, [isVisible]);

  if (!isVisible) return null;

  const validateForm = () => {
    const newErrors: FormErrors = {};
    
    if (!formData.name.trim()) {
      newErrors.name = '이름을 입력해주세요';
    }
    
    if (!formData.phone.trim()) {
      newErrors.phone = '전화번호를 입력해주세요';
    } else if (!/^[0-9-]+$/.test(formData.phone)) {
      newErrors.phone = '올바른 전화번호 형식이 아닙니다';
    }
    
    if (!formData.privacyAgreement) {
      newErrors.privacyAgreement = '개인정보 이용에 동의해주세요';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (validateForm()) {
      // 확인 모달 표시
      setShowConfirmation(true);
    }
  };

  const handleConfirmPayment = async () => {
    setShowConfirmation(false);
    // 관객 정보 입력 완료 후 결제 시작
    setShowPayment(true);
    await startPayment();
  };

  const startPayment = async () => {
    setIsLoading(true);
    setPaymentStatus('pending');
    
    try {
      // 인원 수에 따른 결제 금액 계산 (1명당 20,000원)
      const totalPrice = formData.attendeeCount * 20000;
      
      // PayApp 결제 요청 생성
      const paymentData = {
        userid: 'jiwonnnnnn',
        shopname: '부재시 픽션은 문 앞에 놔주세요',
        goodname: `${propName} - ${formData.attendeeCount}명`,
        price: totalPrice,
        recvphone: formData.phone,
        memo: `${propName} 공연 예매 - ${formData.attendeeCount}명`,
        redirecturl: window.location.origin + '/payment-success',
        feedbackurl: window.location.origin + '/api/payment-callback',
        var1: 'performance_ticket',
        var2: JSON.stringify(formData) // 관객 정보를 var2에 저장
      };

      const response = await createPayAppPayment(paymentData);
      
      if (response.state === '1' && response.payurl) {
        // 개발 환경에서는 시뮬레이션
        if (process.env.NODE_ENV === 'development') {
          console.log('개발 환경: 결제 성공 시뮬레이션 시작');
          setTimeout(() => {
            console.log('결제 상태를 success로 변경');
            setPaymentStatus('success');
            // 2초 후 자동으로 완료 처리
            setTimeout(() => {
              console.log('handlePaymentSuccess 호출');
              handlePaymentSuccess();
            }, 2000);
          }, 3000); // 3초 후 성공 시뮬레이션
        } else {
          // 실제 환경에서는 PayApp으로 리다이렉트
          window.location.href = response.payurl;
        }
      } else {
        throw new Error(response.errorMessage || '결제 요청 실패');
      }
    } catch (error) {
      console.error('결제 시작 오류:', error);
      setPaymentStatus('failed');
    } finally {
      setIsLoading(false);
    }
  };

  const handlePaymentSuccess = async () => {
    console.log('handlePaymentSuccess 함수 시작');
    try {
      // 데이터 저장
      const response = await fetch('/api/audience/save', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          name: formData.name,
          phone: formData.phone,
          attendeeCount: formData.attendeeCount,
          busService: formData.busService,
          busDetails: formData.busService ? { attendeeCount: formData.busAttendeeCount } : null,
          privacyAgreement: formData.privacyAgreement,
          propId: propId,
          propName: propName,
          paymentAmount: formData.attendeeCount * 20000, // 1인당 20,000원
          payappMulNo: null, // PayApp 결제 번호는 별도로 관리
        }),
      });

      if (response.ok) {
        // 이메일 전송
        try {
          console.log('이메일 전송 시도...');
          const emailResponse = await fetch('/api/email/send', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              name: formData.name,
              phone: formData.phone,
              attendeeCount: formData.attendeeCount,
              busService: formData.busService,
              busAttendeeCount: formData.busAttendeeCount,
              propName: propName,
            }),
          });
          
          if (emailResponse.ok) {
            console.log('이메일 전송 완료');
          } else {
            console.error('이메일 전송 실패:', emailResponse.status, emailResponse.statusText);
          }
        } catch (emailError) {
          console.error('이메일 전송 오류:', emailError);
          // 이메일 전송 실패는 전체 프로세스를 중단하지 않음
        }

        // 해당 물품을 주문 완료 상태로 표시
        if (typeof window !== 'undefined' && (window as any).handlePropCompleted) {
          console.log('handlePropCompleted 호출:', propId);
          (window as any).handlePropCompleted(propId);
        }

        // 결제 모달 닫기
        setShowPayment(false);
        
        // 영수증 출력 여부 확인
        console.log('영수증 출력 선택창 표시');
        setShowReceiptConfirm(true);
        
        // 성공적으로 저장된 경우 (영수증 출력 후에 호출)
        // onComplete(formData);
      } else {
        const errorData = await response.json();
        console.error('데이터 저장 실패:', errorData);
        throw new Error(errorData.error || '데이터 저장 실패');
      }
    } catch (error) {
      console.error('데이터 저장 오류:', error);
      
      // 에러가 발생해도 영수증 출력 선택창은 표시
      setShowPayment(false);
      setShowReceiptConfirm(true);
      
      // 사용자에게 에러 메시지 표시
      alert('데이터 저장에 실패했습니다. 다시 시도해주세요.');
    }
  };

  // 영수증 프린트 함수
  const printReceipt = () => {
    // 프린트용 영수증 HTML 생성
    const receiptHTML = `
      <!DOCTYPE html>
      <html>
        <head>
          <title>Receipt</title>
          <style>
            @page {
              margin: 0;
              size: 80mm 200mm;
            }
            @media print {
              @page {
                margin: 0;
                size: 80mm 200mm;
              }
              body { 
                margin: 0; 
                -webkit-print-color-adjust: exact;
                print-color-adjust: exact;
              }
              .receipt { 
                max-width: none; 
                width: 100%;
              }
              /* 프린트 시 브라우저 헤더/푸터 숨기기 */
              html, body {
                -webkit-print-color-adjust: exact !important;
                print-color-adjust: exact !important;
                color-adjust: exact !important;
              }
              /* 자동 인쇄 강제 */
              * {
                -webkit-print-color-adjust: exact !important;
                print-color-adjust: exact !important;
                color-adjust: exact !important;
              }
            }
            body { 
              margin: 0; 
              padding: 5px 10px; 
              font-family: Arial, sans-serif; 
              font-size: 11px; 
              line-height: 1.3;
              -webkit-print-color-adjust: exact;
              print-color-adjust: exact;
            }
            .receipt { 
              width: 100%; 
              max-width: 70mm; 
              margin: 0 auto; 
              padding-top: 0;
            }
            .section { 
              margin-bottom: 12px; 
            }
            .section-title { 
              font-weight: bold; 
              margin-bottom: 4px; 
              border-bottom: 1px solid #000; 
              padding-bottom: 2px; 
            }
            .info-row { 
              display: flex; 
              justify-content: space-between; 
              margin-bottom: 2px; 
            }
            .total { 
              font-weight: bold; 
              font-size: 13px; 
              margin-top: 12px; 
              padding-top: 8px; 
              border-top: 2px solid #000; 
            }
          </style>
        </head>
        <body>
          <div class="receipt">
            <div class="section" style="margin-top: 0;">
              <div class="section-title">공연 정보</div>
              <div class="info-row">
                <span>공연명:</span>
                <span>〈부재시 픽션은 문 앞에 놔주세요〉</span>
              </div>
              <div class="info-row">
                <span>공연일시:</span>
                <span>2025년 10월 30일</span>
              </div>
              <div class="info-row">
                <span>장소:</span>
                <span>전시장</span>
              </div>
              <div class="info-row">
                <span>선택 소품:</span>
                <span>${propName}</span>
              </div>
            </div>
            
            <div class="section">
              <div class="section-title">관객 정보</div>
              <div class="info-row">
                <span>이름:</span>
                <span>${formData.name}</span>
              </div>
              <div class="info-row">
                <span>연락처:</span>
                <span>${formData.phone}</span>
              </div>
              <div class="info-row">
                <span>관람 인원:</span>
                <span>${formData.attendeeCount}명</span>
              </div>
            </div>
            
            ${formData.busService ? `
            <div class="section">
              <div class="section-title">버스 서비스</div>
              <div class="info-row">
                <span>버스 이용:</span>
                <span>예</span>
              </div>
              <div class="info-row">
                <span>버스 이용 인원:</span>
                <span>${formData.busAttendeeCount}명</span>
              </div>
            </div>
            ` : ''}
            
            <div class="section">
              <div class="section-title">결제 정보</div>
              <div class="info-row">
                <span>결제 금액:</span>
                <span>${(formData.attendeeCount * 20000).toLocaleString()}원</span>
              </div>
              <div class="info-row">
                <span>결제 일시:</span>
                <span>${new Date().toLocaleString('ko-KR')}</span>
              </div>
            </div>
            
            <div class="total">
              총 결제 금액: ${(formData.attendeeCount * 20000).toLocaleString()}원
            </div>
            
            <div style="margin-top: 15px; text-align: center; font-size: 9px; color: #666;">
              문의사항: 010-7168-6144
            </div>
          </div>
        </body>
      </html>
    `;

    try {
      console.log('영수증 프린트 시작');
      
      // 새로운 방식: window.open으로 프린터 창 최소화
      try {
        console.log('window.open 방식으로 프린트 시도...');
        
        // 새 창을 열어서 영수증 표시
        const printWindow = window.open('', '_blank', 'width=800,height=600,scrollbars=yes,resizable=yes');
        
        if (printWindow) {
          // 영수증 HTML을 새 창에 작성
          printWindow.document.write(receiptHTML);
          printWindow.document.close();
          
          // 새 창이 로드된 후 자동 프린트 시도
          printWindow.onload = () => {
            console.log('새 창 로드 완료, 자동 프린트 시작');
            
            // 여러 번 프린트 시도
            const attemptPrint = () => {
              try {
                printWindow.print();
                console.log('프린트 명령 실행됨');
                
                // 프린트 완료 후 창 닫기
                setTimeout(() => {
                  printWindow.close();
                  console.log('프린트 창 닫힘');
                }, 1000);
              } catch (error) {
                console.error('프린트 시도 실패:', error);
              }
            };
            
            // 즉시 프린트
            attemptPrint();
            
            // 백업: 여러 번 시도
            setTimeout(attemptPrint, 100);
            setTimeout(attemptPrint, 300);
            setTimeout(attemptPrint, 500);
          };
          
          // 백업: onload가 작동하지 않을 경우
          setTimeout(() => {
            if (printWindow.document.readyState === 'complete') {
              console.log('백업 프린트 시도');
              printWindow.print();
              setTimeout(() => printWindow.close(), 1000);
            }
          }, 200);
          
        } else {
          throw new Error('새 창을 열 수 없음');
        }
        
      } catch (error) {
        console.error('window.open 방식 실패, iframe 방식으로 fallback:', error);
        
                // 기존 iframe 방식으로 fallback
        const printFrame = document.createElement('iframe');
        printFrame.style.display = 'none';
        document.body.appendChild(printFrame);
        
        printFrame.contentDocument?.write(receiptHTML);
        printFrame.contentDocument?.close();
        
        // iframe 프린트 시도
        printFrame.onload = () => {
          try {
            printFrame.contentWindow?.print();
            console.log('iframe fallback 프린트 성공');
            
            setTimeout(() => {
              document.body.removeChild(printFrame);
            }, 1000);
          } catch (error) {
            console.error('iframe fallback 프린트 실패:', error);
          }
        };
      }

    } catch (error) {
      console.error('프린트 함수 오류:', error);
      try {
        window.print();
      } catch (fallbackError) {
        console.error('기본 프린트도 실패:', fallbackError);
      }
    }
  };

  const handleInputChange = (field: keyof AudienceInfo, value: string | boolean | number) => {
    setFormData(prev => {
      const newData = { ...prev, [field]: value };
      
      // 전체 인원 수가 변경되고, 대절버스 탑승 인원이 전체 인원 수를 초과하는 경우 보정
      if (field === 'attendeeCount' && typeof value === 'number' && newData.busAttendeeCount > value) {
        newData.busAttendeeCount = value;
      }
      
      return newData;
    });
    
    // 에러 메시지 제거
    if (errors[field as keyof FormErrors]) {
      setErrors(prev => ({ ...prev, [field as keyof FormErrors]: undefined }));
    }
  };

  // 결제 모달이 표시되는 경우
  if (showPayment) {
    return (
      <div className="fixed inset-0 bg-black/70 z-60 flex items-center justify-center p-5">
        <div className="bg-white rounded-lg shadow-2xl max-w-md w-full p-6">
          <div className="text-center">
            <h3 className="text-xl font-bold mb-4">결제 진행 중</h3>
            
            {paymentStatus === 'pending' && (
              <>
                <div className="mb-4">
                  <div className="animate-spin rounded-full h-16 w-16 border-b-2 border-pink-600 mx-auto"></div>
                </div>
                <p className="text-sm text-gray-600 mb-4">
                  결제를 진행하고 있습니다...
                </p>
                {isLoading && (
                  <div className="animate-pulse bg-blue-100 p-3 rounded-lg">
                    <p className="text-blue-800 text-sm">결제 요청 중...</p>
                  </div>
                )}
              </>
            )}

            {paymentStatus === 'success' && (
              <div className="text-green-600 mb-4">
                <div className="text-6xl mb-2">✅</div>
                <p className="text-lg font-bold">결제 성공!</p>
                <p className="text-sm text-gray-600 mt-1">잠시 후 완료 처리됩니다...</p>
                <div className="mt-3">
                  <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-green-600 mx-auto"></div>
                </div>
              </div>
            )}

            {paymentStatus === 'failed' && (
              <div className="text-red-600 mb-4">
                <div className="text-6xl mb-2">❌</div>
                <p className="text-lg font-bold">결제 실패</p>
                <p className="text-sm text-gray-600 mt-1">다시 시도해주세요</p>
              </div>
            )}

            <div className="flex gap-3 mt-6">
              {paymentStatus === 'success' ? (
                <button
                  onClick={handlePaymentSuccess}
                  className="flex-1 px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600 transition-colors"
                >
                  완료
                </button>
              ) : (
                <>
                  <button
                    onClick={() => setShowPayment(false)}
                    className="flex-1 px-4 py-2 bg-gray-300 text-gray-700 rounded-md hover:bg-gray-400 transition-colors"
                  >
                    취소
                  </button>
                  
                  {paymentStatus === 'failed' && (
                    <button
                      onClick={startPayment}
                      className="flex-1 px-4 py-2 bg-pink-200 text-gray-800 rounded-md hover:bg-pink-300 transition-colors"
                    >
                      다시 시도
                    </button>
                  )}
                </>
              )}
            </div>
          </div>
        </div>
      </div>
    );
  }

  // 영수증 출력 확인 모달이 표시되는 경우
  if (showReceiptConfirm) {
    return (
      <div className="fixed inset-0 bg-black/70 z-60 flex items-center justify-center p-5">
        <div className="bg-white rounded-lg shadow-2xl max-w-md w-full p-6">
          <div className="text-center mb-6">
            <div className="text-6xl mb-4">🧾</div>
            <h3 className="text-xl font-bold text-gray-800">영수증 출력</h3>
            <p className="text-sm text-gray-600 mt-2">
              예매가 완료되었습니다!<br />
              영수증을 출력하시겠습니까?
            </p>
          </div>

          <div className="bg-gray-50 p-4 rounded-lg mb-6">
            <h4 className="text-sm font-medium text-gray-800 mb-2">예매 정보 요약</h4>
            <div className="text-sm text-gray-700 space-y-1">
              <div className="flex justify-between">
                <span>공연:</span>
                <span className="font-medium">부재시 픽션은 문 앞에 놔주세요</span>
              </div>
              <div className="flex justify-between">
                <span>소품:</span>
                <span className="font-medium">{propName}</span>
              </div>
              <div className="flex justify-between">
                <span>관객:</span>
                <span className="font-medium">{formData.name}</span>
              </div>
              <div className="flex justify-between">
                <span>인원:</span>
                <span className="font-medium">{formData.attendeeCount}명</span>
              </div>
              <div className="flex justify-between">
                <span>금액:</span>
                <span className="font-medium text-pink-600">₩{(formData.attendeeCount * 20000).toLocaleString()}</span>
              </div>
            </div>
          </div>

          <div className="flex gap-3">
            <button
              onClick={() => {
                setShowReceiptConfirm(false);
                onComplete(formData);
              }}
              className="flex-1 px-4 py-2 bg-gray-300 text-gray-700 rounded-md hover:bg-gray-400 transition-colors"
            >
              출력 안함
            </button>
            
            <button
              onClick={() => {
                setShowReceiptConfirm(false);
                printReceipt();
                // 영수증 출력 후 완료 처리
                setTimeout(() => {
                  onComplete(formData);
                }, 1000);
              }}
              className="flex-1 px-4 py-2 bg-pink-200 text-gray-800 hover:bg-pink-300 transition-colors font-medium"
            >
              영수증 출력
            </button>
          </div>
        </div>
      </div>
    );
  }

  // 확인 모달이 표시되는 경우
  if (showConfirmation) {
    return (
      <div className="fixed inset-0 bg-black/70 z-60 flex items-center justify-center p-5">
        <div className="bg-white rounded-lg shadow-2xl max-w-md w-full p-6 max-h-[90vh] overflow-y-auto">
          <div className="text-center mb-6">
            <h3 className="text-xl font-bold text-gray-800">예매 정보 확인</h3>
            <p className="text-sm text-gray-600 mt-1">입력하신 정보를 확인해주세요</p>
          </div>

          {/* 예매 정보 요약 */}
          <div className="space-y-4 mb-6">
            {/* 공연 정보 */}
            <div className="p-4 rounded-lg border border-gray-300">
              <h4 className="text-sm font-medium text-pink-600 mb-2">공연 정보</h4>
              <div className="space-y-2 text-sm text-gray-700">
                <div className="flex justify-between">
                  <span>공연명:</span>
                  <span className="font-medium">부재시 픽션은 문 앞에 놔주세요</span>
                </div>
                <div className="flex justify-between">
                  <span>공연일시:</span>
                  <span className="font-medium">2024년 10월 30일 오후 7시</span>
                </div>
                <div className="flex justify-between">
                  <span>장소:</span>
                  <span className="font-medium">합정역 2번 출구 앞 세아타워</span>
                </div>
                <div className="flex justify-between">
                  <span>선택 소품:</span>
                  <span className="font-medium">{propName}</span>
                </div>
              </div>
            </div>

            {/* 관객 정보 */}
            <div className="p-4 rounded-lg border border-gray-300">
              <h4 className="text-sm font-medium text-pink-600 mb-2">관객 정보</h4>
              <div className="space-y-2 text-sm text-gray-700">
                <div className="flex justify-between">
                  <span>이름:</span>
                  <span className="font-medium">{formData.name}</span>
                </div>
                <div className="flex justify-between">
                  <span>연락처:</span>
                  <span className="font-medium">{formData.phone}</span>
                </div>
                <div className="flex justify-between">
                  <span>관람 인원:</span>
                  <span className="font-medium">{formData.attendeeCount}명</span>
                </div>
              </div>
            </div>

            {/* 대절버스 정보 */}
            {formData.busService && (
              <div className="p-4 rounded-lg border border-gray-300">
                <h4 className="text-sm font-medium text-pink-600 mb-2">대절버스 이용</h4>
                <div className="space-y-2 text-sm text-gray-700">
                  <div className="flex justify-between">
                    <span>탑승 인원:</span>
                    <span className="font-medium">{formData.busAttendeeCount}명</span>
                  </div>
                  <div className="text-xs text-gray-600">
                    탑승 위치: 합정역 2번 출구 앞 세아타워
                  </div>
                  <div className="text-xs text-gray-600">
                    탑승 시간: 10월 30일 오후 5시
                  </div>
                </div>
              </div>
            )}

            {/* 결제 정보 */}
            <div className="p-4 rounded-lg border border-gray-300">
              <h4 className="text-sm font-medium text-pink-600 mb-2">결제 정보</h4>
              <div className="space-y-2 text-sm">
                <div className="flex justify-between">
                  <span className="text-gray-700">관람 인원:</span>
                  <span className="font-medium text-gray-800">{formData.attendeeCount}명</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-700">1인당 가격:</span>
                  <span className="font-medium text-gray-800">₩20,000</span>
                </div>
                <div className="border-t border-gray-300 pt-2 mt-2">
                  <div className="flex justify-between">
                    <span className="text-pink-600 font-semibold">총 결제 금액:</span>
                    <span className="text-pink-600 font-bold text-lg">₩{(formData.attendeeCount * 20000).toLocaleString()}</span>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* 안내사항 */}
          <div className="p-4 rounded-lg border border-gray-300 mb-6">
            <h4 className="text-sm font-medium text-pink-600 mb-2">안내사항</h4>
            <ul className="text-xs text-gray-600 space-y-1">
              <li>• 예매 완료 시 선택하신 소품이 공연에 등장합니다</li>
              <li>• 결제 완료 후 예매 확정됩니다</li>
              <li>• 대절버스 이용 시 지정된 시간과 장소에서 탑승해주세요</li>
              <li>• 문의사항은 010-7168-6144로 연락주세요</li>
            </ul>
          </div>

          {/* 버튼들 */}
          <div className="flex gap-3">
            <button
              onClick={() => setShowConfirmation(false)}
              className="flex-1 px-4 py-2 bg-gray-300 text-gray-700 rounded-md hover:bg-gray-400 transition-colors"
            >
              수정하기
            </button>
            
            <button
              onClick={handleConfirmPayment}
              className="flex-1 px-4 py-2 bg-pink-200 text-gray-800 hover:bg-pink-300 transition-colors font-medium"
            >
              결제 진행
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-5">
      <div className="bg-white w-full max-w-md shadow-2xl max-h-[90vh] overflow-y-auto">
        {/* 헤더 */}
        <div className="bg-pink-200 px-6 py-4 sticky top-0 relative">
          {/* X 버튼 */}
          <button
            onClick={onClose}
            className="absolute top-2 right-4 text-black text-4xl font-light hover:text-gray-700 transition-colors z-10"
          >
            ×
          </button>
          
          <h2 className="text-xl font-bold text-center text-black">
            공연 예매
          </h2>
          <p className="text-sm text-center text-black mt-1">
            예매 완료시 선택해주신 '{propName}'이(가) 공연에 소품으로 등장합니다.
          </p>
        </div>

        {/* 폼 */}
        <form onSubmit={handleSubmit} className="p-6 space-y-4">
          {/* 관객 정보 입력 제목 */}
          <div className="text-center mb-6">
            <h3 className="text-lg font-bold text-gray-800">관객 정보 입력</h3>
          </div>

          {/* 이름 */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              이름 <span className="text-red-500">*</span>
            </label>
            <input
              id="name-input"
              ref={nameInputRef}
              type="text"
              value={formData.name}
              onChange={(e) => handleInputChange('name', e.target.value)}
              onFocus={() => toggleKeyboard('name')}
              readOnly
              className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-pink-300 bg-white ${
                errors.name ? 'border-red-500' : 'border-gray-300'
              } ${showKeyboard && activeField === 'name' ? 'ring-4 ring-pink-200 shadow-lg' : ''}`}
              placeholder="이름을 입력하세요"
            />
            {errors.name && (
              <p className="text-red-500 text-sm mt-1">{errors.name}</p>
            )}
          </div>

          {/* 연락처 */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              핸드폰 번호 <span className="text-red-500">*</span>
            </label>
            <input
              id="phone-input"
              ref={phoneInputRef}
              type="text"
              value={formData.phone}
              onChange={(e) => handleInputChange('phone', e.target.value)}
              onFocus={() => toggleKeyboard('phone')}
              readOnly
              className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-pink-300 bg-white ${
                errors.phone ? 'border-red-500' : 'border-gray-300'
              } ${showKeyboard && activeField === 'phone' ? 'ring-4 ring-pink-200 shadow-lg' : ''}`}
              placeholder="010-1234-5678"
            />
            {errors.phone && (
              <p className="text-red-500 text-sm mt-1">{errors.phone}</p>
            )}
          </div>

          {/* 인원 수 선택 */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              인원 수 <span className="text-red-500">*</span>
            </label>
            <select
              value={formData.attendeeCount}
              onChange={(e) => handleInputChange('attendeeCount', parseInt(e.target.value, 10))}
              className="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-pink-300"
            >
              {[1, 2, 3, 4].map((count) => (
                <option key={count} value={count}>
                  {count}명
                </option>
              ))}
            </select>
            {errors.attendeeCount && (
              <p className="text-red-500 text-sm mt-1">{errors.attendeeCount}</p>
            )}
          </div>

          {/* 대절버스 이용여부 */}
          <div>
            <label className="flex items-center space-x-2 cursor-pointer">
              <input
                type="checkbox"
                checked={formData.busService}
                onChange={(e) => handleInputChange('busService', e.target.checked)}
                className="w-4 h-4 text-pink-600 border-gray-300 rounded focus:ring-pink-500"
              />
              <span className="text-sm font-medium text-gray-700">
                대절버스 이용
              </span>
            </label>
          </div>

          {/* 대절버스 이용 인원 선택 */}
          {formData.busService && (
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                대절버스 탑승 인원 <span className="text-red-500">*</span>
              </label>
              <select
                value={formData.busAttendeeCount}
                onChange={(e) => handleInputChange('busAttendeeCount', parseInt(e.target.value, 10))}
                className="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-pink-300"
              >
                {Array.from({ length: formData.attendeeCount }, (_, i) => i + 1).map((count) => (
                  <option key={count} value={count}>
                    {count}명
                  </option>
                ))}
              </select>
              {errors.busAttendeeCount && (
                <p className="text-red-500 text-sm mt-1">{errors.busAttendeeCount}</p>
              )}
            </div>
          )}

          {/* 대절버스 위치 정보 */}
          <div className="p-4 rounded-lg">
            <h4 className="text-sm font-medium text-gray-800 mb-2">대절버스 탑승 위치</h4>
            <p className="text-sm text-gray-700 mb-3">
              10월 30일 오후 5시 합정역 2번 출구 앞 세아타워
            </p>
            
            {/* 카카오맵 실제 지도퍼가기 - 세아타워 위치 (이미지 크기에 맞춤) */}
            <div className="w-full h-52 rounded-lg overflow-hidden">
              <div id="daumRoughmapContainer1755930369777" className="w-full h-full"></div>
            </div>
          </div>

          {/* 개인정보 이용 동의 */}
          <div className="border-t pt-4">
            <div className="bg-gray-50 p-4 mb-3">
              <h4 className="text-sm font-medium text-gray-800 mb-2">개인정보 이용 내용</h4>
              <p className="text-xs text-gray-600 leading-relaxed">
                입력하신 개인정보는 공연 예매 및 안내, 대절버스 서비스 제공을 위해 이용됩니다. 
                수집된 정보는 공연 종료 직후 폐기됩니다.
              </p>
            </div>
            
            <label className="flex items-start space-x-2 cursor-pointer">
              <input
                type="checkbox"
                checked={formData.privacyAgreement}
                onChange={(e) => handleInputChange('privacyAgreement', e.target.checked)}
                className="w-4 h-4 text-pink-600 border-gray-300 rounded focus:ring-pink-500 mt-0.5"
              />
              <span className="text-sm text-gray-700">
                위 개인정보 이용 내용을 읽고 동의합니다 <span className="text-red-500">*</span>
              </span>
            </label>
            {errors.privacyAgreement && (
              <p className="text-red-500 text-sm mt-1">{errors.privacyAgreement}</p>
            )}
          </div>

          {/* 결제 내용 */}
          <div className="border-t pt-4">
            <div className="bg-pink-50 p-4 border border-pink-200">
              <h4 className="text-sm font-medium text-black mb-3">결제 내용</h4>
              <div className="space-y-2 text-sm">
                <div className="flex justify-between">
                  <span className="text-gray-700">관람 인원:</span>
                  <span className="font-medium text-gray-800">{formData.attendeeCount}명</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-700">1인당 가격:</span>
                  <span className="font-medium text-gray-800">₩20,000</span>
                </div>
                <div className="border-t border-pink-200 pt-2 mt-2">
                  <div className="flex justify-between">
                    <span className="text-black font-semibold">총 결제 금액:</span>
                    <span className="text-black font-bold text-lg">₩{(formData.attendeeCount * 20000).toLocaleString()}</span>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* 버튼들 */}
          <div className="flex gap-3 pt-4">
            <button
              type="button"
              onClick={onClose}
              className="px-4 py-2 bg-gray-300 text-gray-700 hover:bg-gray-400 transition-colors"
            >
              취소
            </button>
            
            <button
              type="submit"
              className="flex-1 px-4 py-2 bg-pink-200 text-gray-800 hover:bg-pink-300 transition-colors font-medium"
            >
              결제하기
            </button>
          </div>
        </form>
      </div>

      {/* 한글 가상 키보드 */}
      {showKeyboard && (
        <div className="fixed inset-0 z-60 flex items-end justify-center">
          {/* 키보드 위쪽 영역은 투명하게 (입력 필드가 보이도록) */}
          <div className="absolute inset-0 bg-transparent" onClick={() => toggleKeyboard(activeField!)} />
          
          {/* 키보드 컨테이너 */}
          <div className="bg-white w-full max-w-4xl shadow-[0_-10px_25px_-5px_rgba(0,0,0,0.1),0_-4px_6px_-2px_rgba(0,0,0,0.05)] relative z-10">
            {/* ko-customKeyboard 컨테이너 */}
            <div 
              ref={keyboardRef} 
              data-keyboard-zone
              className="w-full bg-gray-100 overflow-hidden"
              style={{ 
                minHeight: '280px',
                position: 'relative'
              }}
            />
          </div>
        </div>
      )}


    </div>
  );
}
